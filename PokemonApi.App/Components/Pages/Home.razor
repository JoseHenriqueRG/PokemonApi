@page "/"
@using PokemonApi.Business
@using PokemonApi.Domain.Entidades
@using PokemonApi.Domain.Interfaces
@using PokemonApi.Domain.ViewModels
@using PokemonApi.App.Components.Shared;
@using Helpers
@using Radzen
@using Radzen.Blazor
@inject IPokeApiBusiness PokeApiBusiness

<PageTitle>Home</PageTitle>

@if (!details)
{
    <RadzenDataList Data=@_pokemonsView
                    TItem="PokemonsListViewModel"
                    WrapItems="true"
                    AllowPaging="true"
                    IsLoading=@isLoading
                    LoadData=@GetPokemons
                    Count=@count
                    PageSize="24"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    ShowPagingSummary="true"
                    PagingSummaryFormat="Página {0} de {1} ({2} Itens)">
        <Template Context="pokemon">
            <RadzenCard Style="width:300px;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenImage Path="@pokemon.Image" Style="width: 80px; height: 80px; border-radius: 50%" AlternateText="@pokemon.Name" />
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Nome</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@pokemon.Name</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                <RadzenRow>
                    <RadzenColumn Size="8" class="rz-text-truncate">
                        <b>@pokemon.Name</b>
                    </RadzenColumn>
                    <RadzenColumn Size="4" class="rz-text-align-end">
                        <RadzenButton ButtonType="ButtonType.Button" Text="Detalhes" Click="@(args => GetDetails(pokemon.Id))" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}
else
{
    if (_pokemonView is not null)
    {
        <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 420px" Variant="Variant.Filled">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
                <RadzenImage Path="@_pokemonView.Pokemon.Sprites.FrontDefault" Style="width: 100px; height: 100px; border-radius: 50%;" />
                <RadzenStack Gap="0">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Nome</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@Helper.ToUpperFirstLetter(_pokemonView.Pokemon.Name)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Experiência</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@_pokemonView.Pokemon.BaseExperience</b></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
                <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Habilidades</strong></RadzenText>
                <RadzenRow RowGap="0">
                    <RadzenColumn SizeSM="12">
                        <RadzenDataList Data="@_pokemonView.Pokemon.Abilities" TItem="PokemonAbility" AllowPaging="false" WrapItems="true" PagerHorizontalAlign="HorizontalAlign.Left">
                            <Template Context="ability">
                                <RadzenRow Gap="0" style="background-color: transparent !important">
                                    <RadzenColumn Size="12">
                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@Helper.ToUpperFirstLetter(ability?.Ability.Name)</b></RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </Template>
                        </RadzenDataList>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </RadzenCard>
    }
}

<Alert Message="@message" IsInfo="@info" ></Alert>

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code
{
    private IList<PokemonsListViewModel>? _pokemonsView { get; set; }
    private PokemonDetailsViewModel? _pokemonView { get; set; }

    string message;
    bool info;
    bool details;
    bool isLoading;
    int limit = 60;
    int offset = 0;
    int count;

    private async Task GetPokemons()
    {
        isLoading = true;

        var result = await PokeApiBusiness.ListPokemons(limit, offset);
        _pokemonsView = result.Items;
        count = result.Items.Count; 

        message = result.Message;
        info = result.IsValid;

        isLoading = false;
    }

    async Task GetDetails(int Id)
    {
        details = true;

        var result = await PokeApiBusiness.GetDetailsPokemon(Id);
        _pokemonView = result.Item;

        message = result.Message;
        info = result.IsValid;
    }
}